from flask import Flask, request, jsonify, render_template_string
from flask_cors import CORS
import xml.etree.ElementTree as ET
import re
from datetime import datetime
import os

app = Flask(__name__)
CORS(app)

# =============== CLASSES ===============
class FormsToApexConverter:
    def __init__(self):
        self.page_id = 100
        self.app_id = 100
        self._id_counter = 1000000000000000000
        
    def parse_xml(self, xml_content):
        """تحليل ملف XML وإستخراج المعلومات"""
        try:
            root = ET.fromstring(xml_content)
            
            form_module = root.find('.//FormModule')
            form_name = form_module.get('Name', 'UNKNOWN_FORM') if form_module is not None else 'UNKNOWN'
            form_title = form_module.get('Title', form_name) if form_module is not None else form_name
            
            blocks = []
            for block in root.findall('.//Block'):
                block_info = {
                    'name': block.get('Name', ''),
                    'table': block.get('QueryDataSourceName', ''),
                    'items': [],
                    'triggers': []
                }
                
                for item in block.findall('.//Item'):
                    item_info = {
                        'name': item.get('Name', ''),
                        'column': item.get('ColumnName', ''),
                        'datatype': item.get('DataType', ''),
                        'itemtype': item.get('ItemType', ''),
                        'prompt': item.get('Prompt', ''),
                        'width': item.get('Width', ''),
                        'maxlength': item.get('MaximumLength', ''),
                        'required': item.get('Required', 'false'),
                        'triggers': []
                    }
                    
                    for trigger in item.findall('.//Trigger'):
                        item_info['triggers'].append({
                            'name': trigger.get('Name', ''),
                            'text': trigger.get('TriggerText', '')
                        })
                        
                    block_info['items'].append(item_info)
                
                for trigger in block.findall('./Trigger'):
                    block_info['triggers'].append({
                        'name': trigger.get('Name', ''),
                        'text': trigger.get('TriggerText', '')
                    })
                    
                blocks.append(block_info)
                
            return {
                'form_name': form_name,
                'form_title': form_title,
                'blocks': blocks
            }
        except Exception as e:
            raise Exception(f"خطأ في تحليل XML: {str(e)}")
    
    def convert_to_apex_sql(self, parsed_data):
        """تحويل البيانات المحللة إلى APEX SQL"""
        sql_statements = []
        
        # Header
        sql_statements.append(f"""-- Oracle APEX export file
-- Generated by Forms to APEX Converter
-- Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
-- Original Form: {parsed_data['form_name']}

set define off verify off feedback off
whenever sqlerror exit sql.sqlcode rollback

begin
wwv_flow_imp.import_begin (
 p_version_yyyy_mm_dd=>'2024.11.30'
,p_release=>'24.2.6'
,p_default_workspace_id=>30591343010351841851
,p_default_application_id=>{self.app_id}
,p_default_id_offset=>0
,p_default_owner=>'WKSP_BEATS'
);
end;
/
""")
        
        main_block = parsed_data['blocks'][0] if parsed_data['blocks'] else None
        if main_block:
            page_title = parsed_data['form_title'] or main_block['name']
            
            sql_statements.append(f"""
prompt --application/pages/page_{self.page_id:05d}
begin
wwv_flow_imp_page.create_page(
 p_id=>{self.page_id}
,p_name=>'{page_title}'
,p_alias=>'{main_block['name'].upper()}'
,p_step_title=>'{page_title}'
,p_autocomplete_on_off=>'OFF'
,p_page_template_options=>'#DEFAULT#'
,p_protection_level=>'C'
,p_page_component_map=>'02'
);
""")
            
            region_id = self.get_next_id()
            sql_statements.append(f"""
wwv_flow_imp_page.create_page_plug(
 p_id=>wwv_flow_imp.id({region_id})
,p_plug_name=>'{main_block['name']}'
,p_region_template_options=>'#DEFAULT#:t-Region--scrollBody'
,p_plug_template=>wwv_flow_imp.id(2531463326621247859)
,p_plug_display_sequence=>10
,p_query_type=>'TABLE'
,p_query_table=>'{main_block['table'] or 'DUAL'}'
,p_include_rowid_column=>true
,p_is_editable=>true
,p_edit_operations=>'i:u:d'
,p_lost_update_check_type=>'VALUES'
,p_plug_source_type=>'NATIVE_FORM'
);
""")
            
            sequence = 10
            for item in main_block['items']:
                sql_statements.append(self.create_apex_item(item, sequence, region_id))
                sequence += 10
            
            sql_statements.append(self.create_buttons(region_id))
            sql_statements.append(self.create_processes(main_block, region_id))
        
        sql_statements.append("""
end;
/
prompt --application/end_environment
begin
wwv_flow_imp.import_end(p_auto_install_sup_obj => nvl(wwv_flow_application_install.get_auto_install_sup_obj, false));
commit;
end;
/
set verify on feedback on define on
prompt  ...done
""")
        
        return '\n'.join(sql_statements)
    
    def create_apex_item(self, item, sequence, region_id):
        """إنشاء عنصر APEX من عنصر Forms"""
        item_type_mapping = {
            'Text Item': 'NATIVE_TEXT_FIELD',
            'Display Item': 'NATIVE_DISPLAY_ONLY',
            'Check Box': 'NATIVE_SINGLE_CHECKBOX',
            'Date': 'NATIVE_DATE_PICKER',
            'List Item': 'NATIVE_SELECT_LIST',
            'Push Button': 'NATIVE_BUTTON'
        }
        
        apex_type = item_type_mapping.get(item['itemtype'], 'NATIVE_TEXT_FIELD')
        
        sql = f"""
wwv_flow_imp_page.create_page_item(
 p_id=>wwv_flow_imp.id({self.get_next_id()})
,p_name=>'P{self.page_id}_{item["name"]}'
,p_item_sequence=>{sequence}
,p_item_plug_id=>wwv_flow_imp.id({region_id})
,p_prompt=>'{item["prompt"] or item["name"]}'
,p_display_as=>'{apex_type}'
"""
        
        if item.get('column'):
            sql += f",p_source=>'{item['column']}'\n"
            sql += ",p_source_type=>'REGION_SOURCE_COLUMN'\n"
            
        if item.get('maxlength'):
            sql += f",p_cMaxlength=>{item['maxlength']}\n"
            
        if item.get('width'):
            try:
                width = int(int(item['width'])/7)
                sql += f",p_cSize=>{width}\n"
            except:
                pass
                
        if item.get('required') == 'true':
            sql += ",p_is_required=>true\n"
            
        sql += ");\n"
        
        return sql
    
    def create_buttons(self, region_id):
        """إنشاء الأزرار الأساسية"""
        buttons = []
        
        buttons.append(f"""
wwv_flow_imp_page.create_page_button(
 p_id=>wwv_flow_imp.id({self.get_next_id()})
,p_button_sequence=>10
,p_button_plug_id=>wwv_flow_imp.id({region_id})
,p_button_name=>'SAVE'
,p_button_action=>'SUBMIT'
,p_button_template_options=>'#DEFAULT#:t-Button--success:t-Button--iconLeft'
,p_button_is_hot=>'Y'
,p_button_image_alt=>'حفظ'
,p_button_position=>'NEXT'
,p_icon_css_classes=>'fa-save'
);
""")
        
        return '\n'.join(buttons)
    
    def create_processes(self, block, region_id):
        """إنشاء العمليات من triggers"""
        processes = []
        
        processes.append(f"""
wwv_flow_imp_page.create_page_process(
 p_id=>wwv_flow_imp.id({self.get_next_id()})
,p_process_sequence=>10
,p_process_point=>'AFTER_SUBMIT'
,p_region_id=>wwv_flow_imp.id({region_id})
,p_process_type=>'NATIVE_FORM_DML'
,p_process_name=>'Process form {block["name"]}'
,p_attribute_01=>'REGION_SOURCE'
,p_error_display_location=>'INLINE_IN_NOTIFICATION'
);
""")
        
        return '\n'.join(processes)
    
    def get_next_id(self):
        """توليد ID جديد"""
        self._id_counter += 1
        return self._id_counter

# =============== HTML TEMPLATE ===============
HTML_TEMPLATE = """
<!DOCTYPE html>
<html dir="rtl" lang="ar">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>APEX Assistant - محول Forms</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }
        
        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            padding: 30px;
        }
        
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        
        .upload-area {
            border: 3px dashed #667eea;
            border-radius: 10px;
            padding: 50px;
            text-align: center;
            transition: all 0.3s;
            cursor: pointer;
            background: #f8f9fa;
        }
        
        .upload-area:hover {
            background: #e9ecef;
            border-color: #764ba2;
        }
        
        .upload-area.drag-over {
            background: #e7e5ff;
            border-color: #764ba2;
        }
        
        .result-area {
            margin-top: 30px;
            display: none;
        }
        
        .code-output {
            background: #2d2d2d;
            color: #f8f8f2;
            padding: 20px;
            border-radius: 10px;
            font-family: monospace;
            font-size: 14px;
            overflow-x: auto;
            max-height: 500px;
            overflow-y: auto;
            white-space: pre-wrap;
        }
        
        .btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s;
            margin: 10px;
        }
        
        .btn:hover {
            background: #764ba2;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        .btn-download {
            background: #28a745;
        }
        
        .btn-download:hover {
            background: #218838;
        }
        
        .loading {
            display: none;
            text-align: center;
            margin: 20px 0;
        }
        
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            display: none;
        }
        
        .success {
            background: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🔄 محول Oracle Forms إلى Oracle APEX</h1>
        
        <div class="upload-area" id="uploadArea">
            <h2>📁 اسحب ملف XML هنا أو انقر للاختيار</h2>
            <p>يدعم ملفات Oracle Forms XML فقط</p>
            <input type="file" id="fileInput" accept=".xml" style="display: none;">
        </div>
        
        <div class="loading" id="loading">
            <div class="spinner"></div>
            <p>جاري التحويل...</p>
        </div>
        
        <div class="error" id="errorMsg"></div>
        <div class="success" id="successMsg"></div>
        
        <div class="result-area" id="resultArea">
            <h2>📄 كود SQL الناتج:</h2>
            <div class="code-output" id="codeOutput"></div>
            <div style="text-align: center; margin-top: 20px;">
                <button class="btn btn-download" onclick="downloadSQL()">💾 تحميل ملف SQL</button>
                <button class="btn" onclick="copyToClipboard()">📋 نسخ الكود</button>
                <button class="btn" onclick="convertAnother()">🔄 تحويل ملف آخر</button>
            </div>
        </div>
    </div>
    
    <script>
        let sqlOutput = '';
        
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        const loading = document.getElementById('loading');
        const resultArea = document.getElementById('resultArea');
        const codeOutput = document.getElementById('codeOutput');
        const errorMsg = document.getElementById('errorMsg');
        const successMsg = document.getElementById('successMsg');
        
        uploadArea.addEventListener('click', () => fileInput.click());
        
        fileInput.addEventListener('change', handleFileSelect);
        
        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('drag-over');
        });
        
        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('drag-over');
        });
        
        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('drag-over');
            
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                handleFile(files[0]);
            }
        });
        
        function handleFileSelect(e) {
            const file = e.target.files[0];
            if (file) {
                handleFile(file);
            }
        }
        
        function handleFile(file) {
            if (!file.name.endsWith('.xml')) {
                showError('يجب اختيار ملف XML فقط!');
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                convertXML(e.target.result);
            };
            reader.readAsText(file);
        }
        
        function convertXML(xmlContent) {
            loading.style.display = 'block';
            errorMsg.style.display = 'none';
            successMsg.style.display = 'none';
            
            fetch('/convert', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ xml: xmlContent })
            })
            .then(response => response.json())
            .then(data => {
                loading.style.display = 'none';
                
                if (data.error) {
                    showError(data.error);
                } else {
                    sqlOutput = data.sql;
                    codeOutput.textContent = sqlOutput;
                    resultArea.style.display = 'block';
                    showSuccess('تم التحويل بنجاح!');
                }
            })
            .catch(error => {
                loading.style.display = 'none';
                showError('حدث خطأ أثناء التحويل: ' + error.message);
            });
        }
        
        function downloadSQL() {
            const blob = new Blob([sqlOutput], { type: 'text/sql' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'apex_page.sql';
            a.click();
            window.URL.revokeObjectURL(url);
        }
        
        function copyToClipboard() {
            navigator.clipboard.writeText(sqlOutput).then(() => {
                showSuccess('تم نسخ الكود بنجاح!');
            });
        }
        
        function convertAnother() {
            resultArea.style.display = 'none';
            fileInput.value = '';
            errorMsg.style.display = 'none';
            successMsg.style.display = 'none';
        }
        
        function showError(message) {
            errorMsg.textContent = message;
            errorMsg.style.display = 'block';
            setTimeout(() => errorMsg.style.display = 'none', 5000);
        }
        
        function showSuccess(message) {
            successMsg.textContent = message;
            successMsg.style.display = 'block';
            setTimeout(() => successMsg.style.display = 'none', 3000);
        }
    </script>
</body>
</html>
"""

# =============== ROUTES ===============
@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE)

@app.route('/convert', methods=['POST'])
def convert():
    try:
        data = request.json
        xml_content = data.get('xml', '')
        
        if not xml_content:
            return jsonify({'error': 'لم يتم توفير محتوى XML'}), 400
        
        converter = FormsToApexConverter()
        parsed_data = converter.parse_xml(xml_content)
        sql_output = converter.convert_to_apex_sql(parsed_data)
        
        return jsonify({'sql': sql_output})
        
    except ET.ParseError as e:
        return jsonify({'error': f'خطأ في تحليل XML: {str(e)}'}), 400
    except Exception as e:
        return jsonify({'error': f'خطأ في التحويل: {str(e)}'}), 500

@app.route('/health')
def health():
    return jsonify({'status': 'healthy', 'message': 'APEX Assistant is running!'})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
